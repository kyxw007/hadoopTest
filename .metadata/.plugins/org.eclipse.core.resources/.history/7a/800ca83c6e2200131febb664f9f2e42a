package hadoop;

import java.io.IOException;
import java.util.StringTokenizer;

import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.Reducer;
import org.apache.hadoop.mapreduce.lib.input.FileSplit;
import org.apache.hadoop.util.GenericOptionsParser;

public class InvertedIndex {
	public static class InvertedIndexMapper extends
			Mapper<Object, Text, Text, Text> {
		private Text keyinfo = new Text();
		private Text valueinfo = new Text();
		private FileSplit split;

		public void map(Object key, Text value, Context context)
				throws IOException, InterruptedException {
			split = (FileSplit) context.getInputSplit();
			StringTokenizer itr = new StringTokenizer(value.toString());
			while (itr.hasMoreTokens()) {
				this.keyinfo.set(itr.nextToken() + ":"
						+ split.getPath().toString());
				this.valueinfo.set("1");
				context.write(keyinfo, valueinfo);
			}
		}
	}

	public static class InvertedCombiner extends
			Reducer<Text, Text, Text, Text> {
	
		private Text valueinfo = new Text();
		
		public void reducer(Text key, Iterable<Text> values,Context context) throws IOException, InterruptedException{
			int sum = 0;
			for(Text value: values){
				sum = Integer.parseInt(value.toString());
			}
			
			int splitIndex = key.toString().indexOf(":");
			valueinfo.set(key.toString().substring(splitIndex+1)+":"+sum);
			key.set(key.toString().substring(0,splitIndex));
			context.write(key, valueinfo);
		}
	}
	
	public static class InvertedReducer extends Reducer<Text, Text,Text,Text>{
		private Text result = new Text();
		public void reduce(Text key, Iterable<Text>values,Context context) throws IOException, InterruptedException{
			String fileList = new String();
			for(Text value: values){
				fileList+= value.toString()+";";
			}
			result.set(fileList);
			context.write(key, result);
		}
	}
	
	public static void main(String[] args){
		Configuration conf = new Configuration();
		String[] otherArgs = new GenericOptionsParser(conf,args).getRemainingArgs();
		if(other)
	}

}
